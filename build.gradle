plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.10' apply(false)
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group 'org.example'
version '1.0-SNAPSHOT'

allprojects {
    repositories {
        mavenCentral()
    }
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "application"
    apply plugin: "java"
    apply from: rootProject.file("versions.gradle")
    apply plugin: 'com.github.johnrengelman.shadow'

    test {
        useJUnitPlatform()
    }

    shadowJar {
        archiveBaseName.set(projectDir.name)
        archiveClassifier.set('')
        archiveVersion.set('')
    }
}

tasks.register("buildJar") { buildJar ->
    subprojects
            .stream()
            .filter { project -> project.path.startsWith(":services:") }
            .forEach {
                buildJar.dependsOn(it.tasks.named("shadowJar"))
            }
}

tasks.register("buildImages") { buildImages ->
    subprojects
            .stream()
            .filter { project -> project.path.startsWith(":services:") }
            .forEach {
                println "build image -> $it"
                var rootDir = "$rootDir.path"
                var projectName = it.name
                var filePath = "$rootDir/services/$projectName/build/libs/"
                var file = new File(filePath)
                dockerBuildImage(filePath, projectName)
            }
}

def dockerBuildImage(pathToJar, serviceName) {
    exec {
        executable "docker"
        args "build", "-f", "$rootDir.path/Dockerfile", "$pathToJar", "-t", "$serviceName-service"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}
